function [ResultsBayes, ResultsSEM, ResultsRocSVM, entitySetExpansionQuality] = assessDataAugmentation(TrainFM, TrainLabels, TestFM, TestLabels, kkt_threshold, max_iter, dist_bias)

% N.B: Should get full single, not sparse matrices as input. From a memory
% perspective, this is necessarilly better, as we'll have to create the full 
% versions for SVMs anyway.

% bias means how to change the ratio of Positives to Negatives. 
% For example, dist_bias = 2 means that P:N ratio in bias will be twice
% that of the trainset. 0.5 means the opposite.

% the following matrix will contain the performances pre/post-augmentation:
ResultsSVM = zeros(13,3); % 1-3 reduxes, 4 original, 5,6,7 first redux with three different augmentations, 8,9,10 second, 11, 12, 13 third.

disp('starting algorithm')

SVMCLassifer = svmtrain(full(TrainFM), TrainLabels ,'kktviolationlevel', kkt_threshold, 'options', statset('MaxIter', max_iter, 'Display', 'iter' ));
Results = svmclassify(SVMCLassifer, full(TestFM));
ResultsSVM(4,:) = quality(Results, TestLabels);

%%%
ResultsSVM(4,:)
disp('trained full train')
%%%

% Now, we need to create redux sets, with their labels, respective unlabeled set - its feature matrix, and its (true) labels to assess quality of entity set expansion (aug2).

%LabelsPrecision = zeros(1, length(TrainLabels));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sample = 0.1; % first redux

[redux10FM, redux10Labels, redux10augLabels] = createRedux(TrainFM, TrainLabels, sample, dist_bias);

[newPos10Bayes, newPos10SEM, newPos10RocSVM] = augmentData(TrainFM, redux10augLabels, kkt_threshold, max_iter);

[newNeg10Bayes, newNeg10SEM, newNeg10RocSVM] = augmentData(TrainFM, binarizePosteriors(-redux10augLabels, 0), kkt_threshold, max_iter);

interBayes = intersect(newPos10Bayes, newNeg10Bayes);
interSem = inte

LabelsPrecision = TrainLabels - redux10augLabels; % just leave the non-remaining positives.

disp('augmented redux10')

SVMClassifierRedux10 = svmtrain(full(redux10FM), redux10Labels,'kktviolationlevel', kkt_threshold, 'options', statset('MaxIter', max_iter, 'Display', 'final' ));

Results = svmclassify(SVMClassifierRedux10, TestFM);

ResultsSVM(1,:) = quality(Results, TestLabels);

clear SVMClassifierRedux10;

% Now, we are to use all the new positives to retrain, and reassess!

ResultsSVM(1,:)
disp('trained SVM redux10')

% Bayes:

LabelsPrecNew = zeros(1, length(TrainLabels));
LabelsPrecNew(newPos10Bayes) = 1;
entitySetExpansionQuality(1, :) = quality(LabelsPrecNew, LabelsPrecision);

reduxx = zeros(size(redux10FM, 1) + length(newPos10Bayes), size(redux10FM, 2), 'single');
reduxx(1:size(redux10FM, 1), :) = redux10FM;
reduxx(size(redux10FM,1) + 1 : size(reduxx, 1), :) = TrainFM(newPos10Bayes, :);
reduxxLabels = ones(1, size(reduxx, 1));   
reduxxLabels(1:size(redux10FM, 1)) = redux10Labels;

disp('bayes10 test set made')

SVMCLassifer = svmtrain(full(reduxx), reduxxLabels, 'kktviolationlevel', kkt_threshold, 'options', statset('MaxIter', max_iter, 'Display', 'final' ));
Results = svmclassify(SVMCLassifer, full(TestFM));
ResultsSVM(5,:) = quality(Results, TestLabels);

ResultsSVM(5,:)
disp('bayes redux10 done')

clear SVMCLassifer;
clear reduxx;

% SEM:

LabelsPrecNew = zeros(1, length(TrainLabels));
LabelsPrecNew(newPos10SEM) = 1;
entitySetExpansionQuality(2, :) = quality(LabelsPrecNew, LabelsPrecision);

reduxx = zeros(size(redux10FM, 1) + length(newPos10SEM), size(redux10FM, 2), 'single');
reduxx(1:size(redux10FM, 1), :) = redux10FM;
reduxx(size(redux10FM,1) + 1 : size(reduxx, 1), :) = TrainFM(newPos10SEM, :);
reduxxLabels = ones(1, size(reduxx, 1));   
reduxxLabels(1:size(redux10FM, 1)) = redux10Labels;

disp('sem10 test set made')

SVMCLassifer = svmtrain(full(reduxx), reduxxLabels, 'kktviolationlevel', kkt_threshold, 'options', statset('MaxIter', max_iter, 'Display', 'final' ));
Results = svmclassify(SVMCLassifer, full(TestFM));
ResultsSVM(6,:) = quality(Results, TestLabels);

clear SVMCLassifer;
clear reduxx;

ResultsSVM(6,:)
disp('sem redux10 done')


% RocSVM:

LabelsPrecNew = zeros(1, length(TrainLabels));
LabelsPrecNew(newPos10RocSVM) = 1;
entitySetExpansionQuality(3, :) = quality(LabelsPrecNew, LabelsPrecision);

reduxx = zeros(size(redux10FM, 1) + length(newPos10RocSVM), size(redux10FM, 2), 'single');
reduxx(1:size(redux10FM, 1), :) = redux10FM;
reduxx(size(redux10FM,1) + 1 : size(reduxx, 1), :) = TrainFM(newPos10RocSVM, :);
reduxxLabels = ones(1, size(reduxx, 1));   
reduxxLabels(1:size(redux10FM, 1)) = redux10Labels;

disp('rocSVM10 test set made')

SVMCLassifer = svmtrain(full(reduxx), reduxxLabels, 'kktviolationlevel', kkt_threshold, 'options', statset('MaxIter', max_iter, 'Display', 'final' ));
Results = svmclassify(SVMCLassifer, full(TestFM));
ResultsSVM(7,:) = quality(Results, TestLabels);

clear SVMCLassifer;
clear reduxx;

ResultsSVM(7, :)
disp('rocsvm redux10 done')

clear redux10FM;
clear redux10augFM;
clear redux10Labels;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

disp('starting redux33')

sample = 0.33;

[redux33FM, redux33Labels, redux33augLabels] = createRedux(TrainFM, TrainLabels, sample, dist_bias);

[newPos33Bayes, newPos33SEM, newPos33RocSVM] = augmentData(TrainFM, redux33augLabels, kkt_threshold, max_iter);

disp('augmented redux33')

SVMClassifierRedux33 = svmtrain(full(redux33FM), redux33Labels, 'kktviolationlevel', kkt_threshold, 'options', statset('MaxIter', max_iter, 'Display', 'final' ));

Results = svmclassify(SVMClassifierRedux33, TestFM);

ResultsSVM(2,:) = quality(Results, TestLabels);

LabelsPrecision = TrainLabels - redux33augLabels; % just leave the non-remaining positives.

clear SVMClassifierRedux33;

ResultsSVM(2,:)
disp('svm redux33 done')

% Bayes:

LabelsPrecNew = zeros(1, length(TrainLabels));
LabelsPrecNew(newPos33Bayes) = 1;
entitySetExpansionQuality(4, :) = quality(LabelsPrecNew, LabelsPrecision);

reduxx = zeros(size(redux33FM, 1) + length(newPos33Bayes), size(redux33FM, 2), 'single');
reduxx(1:size(redux33FM, 1), :) = redux33FM;
reduxx(size(redux33FM,1) + 1 : size(reduxx, 1), :) = TrainFM(newPos33Bayes, :);
reduxxLabels = ones(1, size(reduxx, 1));   
reduxxLabels(1:size(redux33FM, 1)) = redux33Labels;

disp('bayes set33 made')

SVMCLassifer = svmtrain(reduxx, reduxxLabels, 'kktviolationlevel', kkt_threshold, 'options', statset('MaxIter', max_iter, 'Display', 'final' ));
Results = svmclassify(SVMCLassifer, TestFM);
ResultsSVM(8,:) = quality(Results, TestLabels);


clear SVMCLassifer;
clear reduxx;
ResultsSVM(8,:)
disp('bayes svm33 done')

% SEM:

LabelsPrecNew = zeros(1, length(TrainLabels));
LabelsPrecNew(newPos33SEM) = 1;
entitySetExpansionQuality(5, :) = quality(LabelsPrecNew, LabelsPrecision);

reduxx = zeros(size(redux33FM, 1) + length(newPos33SEM), size(redux33FM, 2), 'single');
reduxx(1:size(redux33FM, 1), :) = redux33FM;
reduxx(size(redux33FM,1) + 1 : size(reduxx, 1), :) = TrainFM(newPos33SEM, :);
reduxxLabels = ones(1, size(reduxx, 1));   
reduxxLabels(1:size(redux33FM, 1)) = redux33Labels;

disp('bayes sem33 set done')

SVMCLassifer = svmtrain(full(reduxx), reduxxLabels, 'kktviolationlevel', kkt_threshold, 'options', statset('MaxIter', max_iter, 'Display', 'final' ));
Results = svmclassify(SVMCLassifer, full(TestFM));
ResultsSVM(9,:) = quality(Results, TestLabels);

clear SVMCLassifer;
clear reduxx;

ResultsSVM(9,:)
disp('sem33 svm done')


% RocSVM:

LabelsPrecNew = zeros(1, length(TrainLabels));
LabelsPrecNew(newPos33RocSVM) = 1;
entitySetExpansionQuality(6, :) = quality(LabelsPrecNew, LabelsPrecision);

reduxx = zeros(size(redux33FM, 1) + length(newPos33RocSVM), size(redux33FM, 2), 'single');
reduxx(1:size(redux33FM, 1), :) = redux33FM;
reduxx(size(redux33FM,1) + 1 : size(reduxx, 1), :) = TrainFM(newPos33RocSVM, :);
reduxxLabels = ones(1, size(reduxx, 1));   
reduxxLabels(1:size(redux33FM, 1)) = redux33Labels;

disp('rocSVM33 test set made')

SVMCLassifer = svmtrain(full(reduxx), reduxxLabels, 'kktviolationlevel', kkt_threshold, 'options', statset('MaxIter', max_iter, 'Display', 'final' ));
Results = svmclassify(SVMCLassifer, full(TestFM));
ResultsSVM(10,:) = quality(Results, TestLabels);

clear SVMCLassifer;
clear reduxx;

ResultsSVM(10,:)
disp('rocSVM redux33 done')

clear redux33FM;
clear redux33augFM;
clear redux33Labels;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sample = 0.8;

[redux80FM, redux80Labels, redux80augLabels] = createRedux(TrainFM, TrainLabels, sample, dist_bias);

[newPos80Bayes, newPos80SEM, newPos80RocSVM] = augmentData(TrainFM, redux80augLabels, kkt_threshold, max_iter);

disp('augmentation80 done')

SVMClassifierRedux80 = svmtrain(full(redux80FM), redux80Labels,'kktviolationlevel', kkt_threshold, 'options', statset('MaxIter', max_iter, 'Display', 'final' ));

Results = svmclassify(SVMClassifierRedux80, TestFM);

ResultsSVM(3,:) = quality(Results, TestLabels);

LabelsPrecision = TrainLabels - redux80augLabels; % just leave the non-remaining positives.

ResultsSVM(3,:)
disp('redux80 svm done')
clear SVMClassifierRedux80;

% Bayes:

LabelsPrecNew = zeros(1, length(TrainLabels));
LabelsPrecNew(newPos80Bayes) = 1;
entitySetExpansionQuality(7, :) = quality(LabelsPrecNew, LabelsPrecision);

reduxx = zeros(size(redux80FM, 1) + length(newPos80Bayes), size(redux80FM, 2), 'single');
reduxx(1:size(redux80FM, 1), :) = redux80FM;
reduxx(size(redux80FM,1) + 1 : size(reduxx, 1), :) = TrainFM(newPos80Bayes, :);
reduxxLabels = ones(1, size(reduxx, 1));   
reduxxLabels(1:size(redux80FM, 1)) = redux80Labels;

disp('bayes80 test set made')

SVMCLassifer = svmtrain(full(reduxx), reduxxLabels, 'kktviolationlevel', kkt_threshold, 'options', statset('MaxIter', max_iter, 'Display', 'final' ));

Results = svmclassify(SVMCLassifer, full(TestFM));
ResultsSVM(11,:) = quality(Results, TestLabels);

clear SVMCLassifer;
clear reduxx;

ResultsSVM(11,:)
disp('bayes svm done')


% SEM:

LabelsPrecNew = zeros(1, length(TrainLabels));
LabelsPrecNew(newPos80SEM) = 1;
entitySetExpansionQuality(8, :) = quality(LabelsPrecNew, LabelsPrecision);

reduxx = zeros(size(redux80FM, 1) + length(newPos80SEM), size(redux80FM, 2), 'single');
reduxx(1:size(redux80FM, 1), :) = redux80FM;
reduxx(size(redux80FM,1) + 1 : size(reduxx, 1), :) = TrainFM(newPos80SEM, :);
reduxxLabels = ones(1, size(reduxx, 1));   
reduxxLabels(1:size(redux80FM, 1)) = redux80Labels;

size(newPos80SEM);

disp('sem80 set made')

SVMCLassifer = svmtrain(full(reduxx), reduxxLabels, 'kktviolationlevel', kkt_threshold, 'options', statset('MaxIter', max_iter, 'Display', 'final' ));
Results = svmclassify(SVMCLassifer, full(TestFM));
ResultsSVM(12,:) = quality(Results, TestLabels);

clear SVMCLassifer;
clear reduxx;

ResultsSVM(12, :)
disp('sem80 svm done')


% RocSVM:

LabelsPrecNew = zeros(1, length(TrainLabels));
LabelsPrecNew(newPos80RocSVM) = 1;
entitySetExpansionQuality(9, :) = quality(LabelsPrecNew, LabelsPrecision);
%Augmented 3. redux:    
reduxx = zeros(size(redux80FM, 1) + length(newPos80RocSVM), size(redux80FM, 2), 'single');
reduxx(1:size(redux80FM, 1), :) = redux80FM;
reduxx(size(redux80FM,1) + 1 : size(reduxx, 1), :) = TrainFM(newPos80RocSVM, :);
reduxxLabels = ones(1, size(reduxx, 1));   
reduxxLabels(1:size(redux80FM, 1)) = redux80Labels;

disp('RocSVM80 test set made')

SVMCLassifer = svmtrain(full(reduxx), reduxxLabels, 'kktviolationlevel', kkt_threshold, 'options', statset('MaxIter', max_iter, 'Display', 'final' ));
Results = svmclassify(SVMCLassifer, full(TestFM));

ResultsSVM(13,:) = quality(Results, TestLabels);

clear SVMCLassifer;
clear reduxx;

ResultsSVM(13, :) 
disp('RocSVM redux80 done')


clear redux80FM;
clear redux80augFM;
clear redux80Labels;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

ResultsBayes = zeros(7, 3);

ResultsBayes(1,:) = ResultsSVM(1,:); % result of first redux
ResultsBayes(2, :) = ResultsSVM(5, :); % augmentation of first Bayes
ResultsBayes(3, :) = ResultsSVM(2, :); % second redux
ResultsBayes(4, :) = ResultsSVM(8, :); % augmentation of second redux
ResultsBayes(5, :) = ResultsSVM(3, :); % third redux's result
ResultsBayes(6, :) = ResultsSVM(11, :);
ResultsBayes(7, :) = ResultsSVM(4, :) % full train used


ResultsSEM = zeros(7,3);

ResultsSEM(1,:) = ResultsSVM(1,:); % result of first redux
ResultsSEM(2, :) = ResultsSVM(6, :); % augmentation of first SEM
ResultsSEM(3, :) = ResultsSVM(2, :); % second redux
ResultsSEM(4, :) = ResultsSVM(9, :); % augmentation of second redux
ResultsSEM(5, :) = ResultsSVM(3, :); % third redux's result
ResultsSEM(6, :) = ResultsSVM(12, :); % third aug
ResultsSEM(7, :) = ResultsSVM(4, :) % full train used


ResultsRocSVM = zeros(7,3);

ResultsRocSVM(1,:) = ResultsSVM(1,:); % result of first redux
ResultsRocSVM(2, :) = ResultsSVM(7, :); % augmentation of first SEM
ResultsRocSVM(3, :) = ResultsSVM(2, :); % second redux
ResultsRocSVM(4, :) = ResultsSVM(10, :); % augmentation of second redux
ResultsRocSVM(5, :) = ResultsSVM(3, :); % third redux's result
ResultsRocSVM(6, :) = ResultsSVM(13, :); % third aug
ResultsRocSVM(7, :) = ResultsSVM(4, :) % full train used

entitySetExpansionQuality